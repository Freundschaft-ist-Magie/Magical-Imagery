@using Data.Models

@foreach (var tag in Product.Tags ?? new List<string>()) {
  <RadzenRow AlignItems="AlignItems.Center">
    <RadzenColumn Size="tag == editingTag ? 9 : 10">
      @if (tag == editingTag) {
        <RadzenTextBox @bind-Value="newTagValue" Style="width: 100%;" />
      } else {
        <RadzenLabel Text="@tag" Style="width: 100%;" Name="Tag" />
      }
    </RadzenColumn>

    @if (tag == editingTag) {
      <RadzenColumn Size="1">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="save" Click="() => SaveTag()" />
      </RadzenColumn>
    }

    <RadzenColumn Size="1">
      <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="edit" Click="() => EditTag(tag)" Disabled="editingTag == tag || editingTag == string.Empty" />
    </RadzenColumn>

    <RadzenColumn Size="1">
      <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="() => DeleteTag(tag)" />
    </RadzenColumn>
  </RadzenRow>
}

<RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Tag hinzufügen" Click="() => EditTag(string.Empty)" Disabled="editingTag == string.Empty" />

@code {
  [Parameter]
  [EditorRequired]
  public Product Product { get; set; } = default!;

  private string? editingTag = null;
  private string? newTagValue = null;

  /// <summary>
  /// edit a tag in the product's tags list
  /// <param name="tag">value of tag</param>
  /// </summary>
  private void EditTag(string tag) {
    // If the tag is empty, we are adding a new tag
    if (string.IsNullOrEmpty(tag))
      Product.Tags.Add(tag);

    // Set the editing state with the provided tag
    editingTag = tag;
    newTagValue = tag;
  }

  /// <summary>
  /// delete a tag from the product's tags list
  /// <param name="tag">value of tag</param>
  /// </summary>
  private void DeleteTag(string tag) {
    Product.Tags.Remove(tag);

    // Reset the editing state
    editingTag = null;
    newTagValue = null;
  }

  /// <summary>
  /// save the edited tag in the product's tags list
  /// </summary>
  private void SaveTag() {
    // Check if the new tag has a value, to prevent UI Bugs 
    if (!string.IsNullOrEmpty(newTagValue) && editingTag != null) {
      var index = Product.Tags.IndexOf(editingTag);
      
      // If the tag exists in the list, update it with the new value
      if (index != -1)
        Product.Tags[index] = newTagValue;

      // Reset the editing state
      editingTag = null;
      newTagValue = null;
    }
  }
}
