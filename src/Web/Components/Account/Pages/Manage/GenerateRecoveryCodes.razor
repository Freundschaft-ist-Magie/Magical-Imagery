@page "/Account/Manage/GenerateRecoveryCodes"

@using Microsoft.AspNetCore.Identity


@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<GenerateRecoveryCodes> Logger

<PageTitle>Zwei-Faktor-Authentifizierungs-Wiederherstellungscodes (2FA) generieren</PageTitle>

@if (recoveryCodes is not null) {
  <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
} else {
  <h3>Zwei-Faktor-Authentifizierungs-Wiederherstellungscodes (2FA) generieren</h3>
  <div class="alert alert-warning" role="alert">
    <p>
      <span class="glyphicon glyphicon-warning-sign"></span>
      <strong>Bewahren Sie diese Codes an einem sicheren Ort auf.</strong>
    </p>
    <p>
      Wenn Sie Ihr Gerät verlieren und keine Wiederherstellungscodes haben, verlieren Sie den Zugriff auf Ihr Konto.
    </p>
    <p>
      Das Generieren neuer Wiederherstellungscodes ändert nicht die in Authenticator-Apps verwendeten Schlüssel. Wenn Sie den Schlüssel in einer Authenticator-App ändern möchten, sollten Sie <a href="Account/Manage/ResetAuthenticator">Ihre Authenticator-Schlüssel zurücksetzen.</a>
    </p>
  </div>
  <div>
    <form @formname="wiederherstellungscodes-generieren" @onsubmit="OnSubmitAsync" method="post">
      <AntiforgeryToken />
      <button class="btn btn-danger" type="submit">Wiederherstellungscodes generieren</button>
    </form>
  </div>
}

@code {
  private string? message;
  private ApplicationUser user = default!;
  private IEnumerable<string>? recoveryCodes;

  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  protected override async Task OnInitializedAsync() {
    user = await UserAccessor.GetRequiredUserAsync(HttpContext);

    var isTwoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
    if (!isTwoFactorEnabled) {
      throw new InvalidOperationException("Cannot generate recovery codes for user because they do not have 2FA enabled.");
    }
  }

  private async Task OnSubmitAsync() {
    var userId = await UserManager.GetUserIdAsync(user);
    recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
    message = "You have generated new recovery codes.";

    Logger.LogInformation("User with ID '{UserId}' has generated new 2FA recovery codes.", userId);
  }
}
