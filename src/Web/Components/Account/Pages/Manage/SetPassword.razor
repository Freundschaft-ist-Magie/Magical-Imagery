@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity


@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Passwort festlegen</PageTitle>

<h3>Passwort festlegen</h3>

<StatusMessage Message="@message" />
<p class="text-info">
  Sie haben keinen lokalen Benutzernamen/Passwort für diese Seite. Fügen Sie ein lokales Konto hinzu, damit Sie sich ohne externen Login anmelden können.
</p>
<div class="row">
  <div class="col-md-6">
    <EditForm Model="Input" FormName="passwort-festlegen" OnValidSubmit="OnValidSubmitAsync" method="post">
      <DataAnnotationsValidator />
      <ValidationSummary class="text-danger" role="alert" />
      <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Bitte geben Sie Ihr neues Passwort ein." />
        <label for="new-password" class="form-label">Neues Passwort</label>
        <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
      </div>
      <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Bitte bestätigen Sie Ihr neues Passwort." />
        <label for="confirm-password" class="form-label">Passwort bestätigen</label>
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
      </div>
      <button type="submit" class="w-100 btn btn-lg btn-primary">Passwort festlegen</button>
    </EditForm>
  </div>
</div>

@code {
  private string? message;
  private ApplicationUser user = default!;

  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  protected override async Task OnInitializedAsync() {
    user = await UserAccessor.GetRequiredUserAsync(HttpContext);

    var hasPassword = await UserManager.HasPasswordAsync(user);
    if (hasPassword) {
      RedirectManager.RedirectTo("Account/Manage/ChangePassword");
    }
  }

  private async Task OnValidSubmitAsync() {
    var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
    if (!addPasswordResult.Succeeded) {
      message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
      return;
    }

    await SignInManager.RefreshSignInAsync(user);
    RedirectManager.RedirectToCurrentPageWithStatus("Your password has been set.", HttpContext);
  }

  private sealed class InputModel {
    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Password)]
    [Display(Name = "New password")]
    public string? NewPassword { get; set; }

    [DataType(DataType.Password)]
    [Display(Name = "Confirm new password")]
    [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
    public string? ConfirmPassword { get; set; }
  }
}
