@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity


@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Passwort ändern</PageTitle>

<h3>Passwort ändern</h3>
<StatusMessage Message="@message" />

<div class="row">
  <div class="col-md-6">
    <EditForm Model="Input" FormName="passwort-aendern" OnValidSubmit="OnValidSubmitAsync" method="post">
      <DataAnnotationsValidator />
      <ValidationSummary class="text-danger" role="alert" />
      <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Bitte geben Sie Ihr altes Passwort ein." />
        <label for="old-password" class="form-label">Altes Passwort</label>
        <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
      </div>
      <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Bitte geben Sie Ihr neues Passwort ein." />
        <label for="new-password" class="form-label">Neues Passwort</label>
        <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
      </div>
      <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Bitte bestätigen Sie Ihr neues Passwort." />
        <label for="confirm-password" class="form-label">Passwort bestätigen</label>
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
      </div>
      <button type="submit" class="w-100 btn btn-lg btn-primary">Passwort aktualisieren</button>
    </EditForm>
  </div>
</div>

@code {
  private string? message;
  private ApplicationUser user = default!;
  private bool hasPassword;

  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  protected override async Task OnInitializedAsync() {
    user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    hasPassword = await UserManager.HasPasswordAsync(user);
    if (!hasPassword) {
      RedirectManager.RedirectTo("Account/Manage/SetPassword");
    }
  }

  private async Task OnValidSubmitAsync() {
    var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
    if (!changePasswordResult.Succeeded) {
      message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
      return;
    }

    await SignInManager.RefreshSignInAsync(user);
    Logger.LogInformation("User changed their password successfully.");

    RedirectManager.RedirectToCurrentPageWithStatus("Ihr Passwort wurde geändert", HttpContext);
  }

  private sealed class InputModel {
    [Required]
    [DataType(DataType.Password)]
    [Display(Name = "Altes Passwort")]
    public string OldPassword { get; set; } = "";

    [Required]
    [StringLength(100, ErrorMessage = "Das {0} muss mindestens {2} und höchstens {1} Zeichen lang sein.", MinimumLength = 6)]
    [DataType(DataType.Password)]
    [Display(Name = "Neues Passwort")]
    public string NewPassword { get; set; } = "";

    [DataType(DataType.Password)]
    [Display(Name = "Passwort bestätigen")]
    [Compare("NewPassword", ErrorMessage = "Das neue Passwort und die Bestätigung stimmen nicht überein.")]
    public string ConfirmPassword { get; set; } = "";
  }
}
