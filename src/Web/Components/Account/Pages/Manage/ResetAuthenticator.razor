@page "/Account/Manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity


@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Authenticator-Schlüssel zurücksetzen</PageTitle>

<StatusMessage />
<h3>Authenticator-Schlüssel zurücksetzen</h3>
<div class="alert alert-warning" role="alert">
  <p>
    <span class="glyphicon glyphicon-warning-sign"></span>
    <strong>Wenn Sie Ihren Authenticator-Schlüssel zurücksetzen, funktioniert Ihre Authenticator-App nicht mehr, bis Sie sie neu konfigurieren.</strong>
  </p>
  <p>
    Dieser Vorgang deaktiviert die 2FA, bis Sie Ihre Authenticator-App verifizieren.
    Wenn Sie die Konfiguration Ihrer Authenticator-App nicht abschliessen, können Sie den Zugriff auf Ihr Konto verlieren.
  </p>
</div>
<div>
  <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
    <AntiforgeryToken />
    <button class="btn btn-danger" type="submit">Authenticator-Schlüssel zurücksetzen</button>
  </form>
</div>

@code {
  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  private async Task OnSubmitAsync() {
    var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    await UserManager.SetTwoFactorEnabledAsync(user, false);
    await UserManager.ResetAuthenticatorKeyAsync(user);
    var userId = await UserManager.GetUserIdAsync(user);
    Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

    await SignInManager.RefreshSignInAsync(user);

    RedirectManager.RedirectToWithStatus(
        "Account/Manage/EnableAuthenticator",
        "Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.",
        HttpContext);
  }
}
