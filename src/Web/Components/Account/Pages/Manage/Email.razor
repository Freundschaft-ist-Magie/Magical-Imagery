@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities


@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Email verwalten</PageTitle>

<h3>Email verwalten</h3>

<StatusMessage Message="@message" />
<div class="row">
  <div class="col-md-6">
    <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
      <AntiforgeryToken />
    </form>
    <EditForm Model="Input" FormName="email-aendern" OnValidSubmit="OnValidSubmitAsync" method="post">
      <DataAnnotationsValidator />
      <ValidationSummary class="text-danger" role="alert" />
      @if (isEmailConfirmed) {
        <div class="form-floating mb-3 input-group">
          <input type="text" value="@email" class="form-control" placeholder="Bitte geben Sie Ihre Email ein." disabled />
          <div class="input-group-append">
            <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
          </div>
          <label for="email" class="form-label">Email</label>
        </div>
      } else {
        <div class="form-floating mb-3">
          <input type="text" value="@email" class="form-control" placeholder="Bitte geben Sie Ihre Email ein." disabled />
          <label for="email" class="form-label">Email</label>
          <button type="submit" class="btn btn-link" form="send-verification-form">Verifizierungs-Email senden</button>
        </div>
      }
      <div class="form-floating mb-3">
        <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Bitte neue Email eingeben." />
        <label for="new-email" class="form-label">Neue Email</label>
        <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
      </div>
      <button type="submit" class="w-100 btn btn-lg btn-primary">Email ändern</button>
    </EditForm>
  </div>
</div>

@code {
  private string? message;
  private ApplicationUser user = default!;
  private string? email;
  private bool isEmailConfirmed;

  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  [SupplyParameterFromForm(FormName = "change-email")]
  private InputModel Input { get; set; } = new();

  protected override async Task OnInitializedAsync() {
    user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    email = await UserManager.GetEmailAsync(user);
    isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

    Input.NewEmail ??= email;
  }

  private async Task OnValidSubmitAsync() {
    if (Input.NewEmail is null || Input.NewEmail == email) {
      message = "Die Email ist gleich.";
      return;
    }

    var userId = await UserManager.GetUserIdAsync(user);
    var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
    var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
        new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

    await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

    message = "Bestätigunslink wurde an die Email gesendet. Bitte prüfen sie ihr Postfach und ihren Spam-Ordner.";
  }

  private async Task OnSendEmailVerificationAsync() {
    if (email is null) {
      return;
    }

    var userId = await UserManager.GetUserIdAsync(user);
    var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
    var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

    await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

    message = "Bestätigunslink wurde an die Email gesendet. Bitte prüfen sie ihr Postfach und ihren Spam-Ordner.";
  }

  private sealed class InputModel {
    [Required]
    [EmailAddress]
    [Display(Name = "Neue Email")]
    public string? NewEmail { get; set; }
  }
}
