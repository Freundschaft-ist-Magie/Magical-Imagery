@inherits LayoutComponentBase
@using Data.Models
@using Microsoft.EntityFrameworkCore
@using Web.Service
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ShoppingCartService ShoppingCartService
@inject NavigationManager Navigation


<RadzenDialog />
<RadzenLayout style="position: relative">
	<RadzenHeader>
		<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
			<RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
			<RadzenLabel Text="Magical Imagery" />
			<div style="position:absolute; right:10px;" role="button" @onclick="NavigateToCart">
				<RadzenIcon Icon="credit_card" />
				<RadzenLabel  Text="@($"Zum Warenkorb {itemsInCard}")"  />
			</div>
		</RadzenStack>
	</RadzenHeader>
	<RadzenSidebar Responsive="false" @bind-Expanded="@sidebarExpanded" style="position: absolute">
		<RadzenPanelMenu>
			<NavMenu />
		</RadzenPanelMenu>
	</RadzenSidebar>
	<RadzenBody>
		<div class="rz-p-4">
			@if (!loading)
			{
				@foreach (var maintenance in Maintenances ?? new List<Maintenance>() { })
				{
					<RadzenAlert AlertStyle="AlertStyle.Warning" Variant="Variant.Flat" Shade="Shade.Light" Style="color: black;">
						<h4 class="alert-heading">@maintenance.Message</h4>
						<p><strong>Grund:</strong> @maintenance.Reason</p>
						<p><strong>Zeitspanne:</strong> @maintenance.Schedules[0].ToString("g") - @maintenance.Schedules[1].ToString("g")</p>

						<hr />

						<p class="mb-0">Bitte planen Sie Ihre Einkäufe entsprechend.</p>
					</RadzenAlert>
				}
			}

			@Body
		</div>
	</RadzenBody>
  <RadzenFooter>
    &copy; 2024 Freundschaft ist Magie  - Magical Imagery. Alle Rechte vorbehalten.
  </RadzenFooter>
</RadzenLayout>

@code {
	private List<Maintenance>? Maintenances { get; set; }
	bool sidebarExpanded = false;
	private int itemsInCard => ShoppingCartService.Products.Count;

	private bool loading = true;

	private void NavigateToCart()
	{
		Navigation.NavigateTo("checkout");
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		using var context = await DbFactory.CreateDbContextAsync();

		// get all maintenances within 10 days from now
		var maintenances = context.Maintenances
				.ToList() // load in memory to use C# methods in SQL-Query
				.Where(m => m.Schedules[0] <= DateTime.Now.AddDays(10))
				.OrderBy(m => m.Schedules[0])
				.ToList();

		Maintenances = maintenances;
		loading = false;
	}
}