@inherits LayoutComponentBase
@using Data.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory


<div class="page">
  <div class="sidebar">
    <NavMenu />
  </div>

  <main>
    <RadzenDialog />

    <article class="content px-4">
      @if (!loading) {
        @foreach (var maintenance in Maintenances ?? new List<Maintenance>() { }) {
          <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">@maintenance.Message</h4>
            <p><strong>Grund:</strong> @maintenance.Reason</p>
            <p><strong>Zeitspanne:</strong> @maintenance.Schedules[0].ToString("g") - @maintenance.Schedules[1].ToString("g")</p>

            <hr />

            <p class="mb-0">Bitte planen Sie Ihre Einkäufe entsprechend.</p>
          </div>
        }
      }

      @Body
    </article>
  </main>
</div>

<div id="blazor-error-ui">
  An unhandled error has occurred.
  <a href="" class="reload">Reload</a>
  <a class="dismiss">🗙</a>
</div>

@code {
  private List<Maintenance>? Maintenances { get; set; }

  private bool loading = true;

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();

    using var context = await DbFactory.CreateDbContextAsync();

    // get all maintenances within 10 days from now
    var maintenances = context.Maintenances
      .ToList() // load in memory to use C# methods in SQL-Query
      .Where(m => m.Schedules[0] <= DateTime.Now.AddDays(10))
      .OrderBy(m => m.Schedules[0])
      .ToList();

    Maintenances = maintenances;
    loading = false;
  }
}