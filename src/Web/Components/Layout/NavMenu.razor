@implements IDisposable
@inject NavigationManager NavigationManager
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject DialogService DialogService
@using Data.Models
@using Microsoft.EntityFrameworkCore
@using Web.Components.Pages.Products

<div class="top-row ps-3 navbar navbar-dark">
  <div class="container-fluid">
    <a class="navbar-brand" href="">Magical Imagery</a>
  </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
  <nav class="flex-column">
    <div class="nav-item px-3">
      <NavLink class="nav-link" href="products">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bag-plus" aria-hidden="true" viewBox="0 0 16 16">
          <path fill-rule="evenodd" d="M8 7.5a.5.5 0 0 1 .5.5v1.5H10a.5.5 0 0 1 0 1H8.5V12a.5.5 0 0 1-1 0v-1.5H6a.5.5 0 0 1 0-1h1.5V8a.5.5 0 0 1 .5-.5" />
          <path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1m3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4zM2 5h12v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1z" />
        </svg>
        Produkte
      </NavLink>
    </div>

    <div class="nav-item px-3">
      <button class="nav-link" @onclick=OpenAddProduct>
        <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Produkt erstellen
      </button>
    </div>

    <div class="nav-item px-3">
      <NavLink class="nav-link" href="licences">
        <!-- <i> tag & bt class didn't work, so just use svg code -->
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-journal-text" aria-hidden="true" viewBox="0 0 16 16">
          <path d="M5 10.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5m0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5m0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5m0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5" />
          <path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2" />
          <path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1z" />
        </svg>
        Lizenzen
      </NavLink>
    </div>

    <div class="nav-item px-3">
      <NavLink class="nav-link" href="auth">
        <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Auth Required
      </NavLink>
    </div>

    <AuthorizeView>
      <Authorized>
        <div class="nav-item px-3">
          <NavLink class="nav-link" href="Account/Manage">
            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
          </NavLink>
        </div>

        <div class="nav-item px-3">
          <form action="Account/Logout" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
            <button type="submit" class="nav-link">
              <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
            </button>
          </form>
        </div>
      </Authorized>

      <NotAuthorized>
        <div class="nav-item px-3">
          <NavLink class="nav-link" href="Account/Register">
            <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
          </NavLink>
        </div>

        <div class="nav-item px-3">
          <NavLink class="nav-link" href="Account/Login">
            <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
          </NavLink>
        </div>
      </NotAuthorized>
    </AuthorizeView>
  </nav>
</div>

@code {
  private string? currentUrl;

  protected override void OnInitialized() {
    currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    NavigationManager.LocationChanged += OnLocationChanged;
  }

  private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
    currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
    StateHasChanged();
  }

  public void Dispose() {
    NavigationManager.LocationChanged -= OnLocationChanged;
  }

  /// <summary>
  /// Opens the dialog to add a new product.<br />
  /// It uses the <see cref="Edit"/> component to create a new product.
  /// </summary>
  private async Task OpenAddProduct() {
    Product product = new Product();

    await DialogService.OpenAsync<Edit>($"Produkt erstellen",
     new Dictionary<string, object> {
       { "Product", product },
       { "OnSubmit", EventCallback.Factory.Create(this, () => AddProduct(product))}
     },
     new DialogOptions() { Width = "60vw", Resizable = false, Draggable = false, CloseDialogOnOverlayClick = true }
    );
  }

  /// <summary>
  /// Helper method for the <see cref="OpenAddProduct"/> method.<br />
  /// Adds the product to the database.
  /// </summary>
  /// <param name="product">The product to add</param>
  private async Task AddProduct(Product product) {
    using var context = await DbFactory.CreateDbContextAsync();

    // prevent sql duplicate key exception, because the licence is already in the database
    product.LicenceId = product.Licence.Id;
    product.Licence = null;

    context.Products.Add(product);
    await context.SaveChangesAsync();
  }
}

