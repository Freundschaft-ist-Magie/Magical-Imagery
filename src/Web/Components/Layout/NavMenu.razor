@implements IDisposable
@inject NavigationManager NavigationManager
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject DialogService DialogService
@using Data.Models
@using Microsoft.EntityFrameworkCore
@using Web.Components.Pages.Products

<RadzenPanelMenuItem Path="products" Text="Produkte" Icon="dashboard" />
<RadzenPanelMenuItem Path="licences" Text="Lizenzen" Icon="description" />
<RadzenPanelMenuItem Click=OpenAddProduct Text="Produkt erstellen" Icon="input" />

<AuthorizeView>
  <Authorized>
    <RadzenPanelMenuItem Path="Account/Manage" Text="Einstellungen" Icon="account_circle" />
    <RadzenPanelMenuItem Path="Admin/Dashboard" Text="Admin-Dashboard" Icon="build" />

    <li class="rz-navigation-item">
      <div class="rz-navigation-item-wrapper" style="margin-right:0px">
        <form action="Account/Logout" method="post" style="width: 100%;">
          <div class="rz-navigation-item-link">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
            <RadzenIcon Icon="lock_outline" Style="margin-right: 16px;" />
            <button type="submit"
                    class="d-flex text-dark nav-link rz-navigation-item-text"
                    style="background: transparent; border: 0; padding: 0; ">
              Logout
            </button>
          </div>
        </form>
      </div>
    </li>
  </Authorized>

  <NotAuthorized>
    <RadzenPanelMenuItem Path="Account/Register" Text="Registrieren" Icon="launch" />
    <RadzenPanelMenuItem Path="Account/Login" Text="Login" Icon="lock_open" />
  </NotAuthorized>
</AuthorizeView>

@code {
  private string? currentUrl;

	protected override void OnInitialized()
	{
    currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    NavigationManager.LocationChanged += OnLocationChanged;
  }

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
    currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
    StateHasChanged();
  }

	public void Dispose()
	{
    NavigationManager.LocationChanged -= OnLocationChanged;
  }

	public void NavigateToPage(string page)
	{
    NavigationManager.NavigateTo(page);
  }

  /// <summary>
  /// Opens the dialog to add a new product.<br />
  /// It uses the <see cref="Edit"/> component to create a new product.
  /// </summary>
	private async Task OpenAddProduct()
	{
    Product product = new Product();

    await DialogService.OpenAsync<Edit>($"Produkt erstellen",
      new Dictionary<string, object> {
     { "Product", product },
     { "OnSubmit", EventCallback.Factory.Create(this, () => AddProduct(product))}
         },
      new DialogOptions() { Width = "60vw", Resizable = false, Draggable = false, CloseDialogOnOverlayClick = true }
    );
  }

  /// <summary>
  /// Helper method for the <see cref="OpenAddProduct"/> method.<br />
  /// Adds the product to the database.
  /// </summary>
  /// <param name="product">The product to add</param>
	private async Task AddProduct(Product product)
	{
    using var context = await DbFactory.CreateDbContextAsync();

    // prevent sql duplicate key exception, because the licence is already in the database
    product.LicenceId = product.Licence.Id;
    product.Licence = null;

    context.Products.Add(product);
    await context.SaveChangesAsync();
  }
}

