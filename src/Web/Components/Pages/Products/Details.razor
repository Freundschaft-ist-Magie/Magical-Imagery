@page "/products/details/{id:int}"
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject DialogService DialogService
@using Data.Models
@using Microsoft.EntityFrameworkCore

@if (!string.IsNullOrWhiteSpace(ErrorMessage)) {
  <div class="alert alert-danger" role="alert">
    @ErrorMessage
  </div>
} else if (IsLoading) {
  <LoadingSkeleton />
} else {
  <div class="container p-0">
    <div class="row">
      <div class="col-md-6">
        <img src="@(Product.Image)" alt="Produktbild" class="product-image">

        <div class="d-flex justify-content-center my-2">
          <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="ShowEdit">Bearbeiten</RadzenButton>
        </div>
      </div>
      <div class="col-md-6">
        <div class="product-details">

          <h1 class="product-title">@(Product.Name)</h1>
          <p class="product-price">
            @String.Format(new System.Globalization.CultureInfo("de-CH"), "{0:C}", Product.Price)
          </p>

          <p class="product-description">
            @Product.Description
          </p>

          <div class="technical-description">
            <h3>Technische Beschreibung</h3>
            <ul>
              @foreach (var tag in Product.Tags ?? new List<string>()) {
                <li>@tag</li>
              }
              <li>@Product.Pixel</li>
            </ul>

            <p>
              <b>Was Sie erhalten:</b> Hochauflösende (4k+) handgemalte digitale Kunstdatei, die
              Sie herunterladen und bis zu einer beliebigen Auflösung ausdrucken können. 100% Zufriedenheitsgarantie.
            </p>
          </div>

          <div class="option-table">
            <h3>Lizenz</h3>

            @if (@Product.Licence != null) {
              <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H4" Style="font-width: bold;">
                @Product.Licence.Name
              </RadzenText>

              <p>@Product.Licence.ShortDescription</p>

              <p>
                Die komplette Beschreibung zu den Lizenzen ist auf der <NavLink href="licences">Lizenz Seite</NavLink> zu finden.
              </p>
            } else {
              <p>Keine Lizenzinformationen verfügbar.</p>
              <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Dark">
                  Dies bedeutet nicht, dass dieses Produkt frei von Rechten ist. Bitte kontaktieren Sie uns für weitere Informationen.
              </RadzenAlert>
            }
          </div>

          <button class="btn btn-primary btn-buy">In den Warenkorb</button>
        </div>
      </div>
    </div>

    <div class="comment-section">

      <h3>Kommentare</h3>

      <div class="mb-3">
        <label for="comment" class="form-label">Kommentar hinzufügen:</label>
        <InputTextArea @bind-Value=CommentText class="form-control" id="comment" rows="3"></InputTextArea>
        <button @onclick=PostComment class="btn btn-primary mt-2">Senden</button>
      </div>

      <div class="comments">
        @if(Product.Comments?.Count > 0) {
          @foreach (var comment in Product.Comments) {
            <div class="comment">
              <img src="@comment.ProfileImage" alt="User Avatar">
              <div class="comment-body">
                <p><b>@comment.Author:</b></p>
                <p>@comment.Content</p>
              </div>
            </div>
          }
        } else {
          <p>Dieser Artikel hat keine Kommentare.</p>
        }
      </div>
    </div>
  </div>
}

@code {
  [Parameter]
  public int Id { get; set; }

  public Product Product { get; set; }

  private string CommentText { get; set; } = string.Empty;

  public string ErrorMessage = string.Empty;
  private bool IsLoading = true;

  protected override async Task OnInitializedAsync() {
    using var context = await DbFactory.CreateDbContextAsync();

    var product = await context.Products.Include(p => p.Comments).Include(p => p.Licence).FirstOrDefaultAsync(p => p.Id == Id);

    if (product == null) {
      ErrorMessage = "Das Produkt konnte nicht gefunden werden.";
      return;
    }

    Product = product;
    IsLoading = false;
  }

  private async Task ShowEdit() {
    bool isEdited = await DialogService.OpenAsync<Edit>($"Produkt Nr. {Product.Id}",
     new Dictionary<string, object> {
       { "Product", Product }
     },
     new DialogOptions() { Width = "60vw", Resizable = false, Draggable = false, CloseDialogOnOverlayClick = true }
    );

    if (isEdited)
      StateHasChanged();
  }

  private void PostComment() {
    if (string.IsNullOrWhiteSpace(CommentText)) {
      return;
    }

    Product.Comments?.Add(new Comment() {
        Author = "Anonymous",
        Content = CommentText,
        ProfileImage = "https://picsum.photos/40/40"
      });
  }

  private void RecalcPrice(uint modificator, bool isChecked) {
    int priceChange = isChecked ? -(int)modificator : +(int)modificator;
    Product.Price += (uint)priceChange;
  }
}
