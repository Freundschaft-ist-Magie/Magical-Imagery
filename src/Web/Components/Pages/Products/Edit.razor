@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject DialogService DialogService
@inject FileService FileUploadService
@inject IJSRuntime JSRuntime
@using Data.Models
@using Microsoft.EntityFrameworkCore
@using Web.Services
@using Microsoft.JSInterop

<PageTitle>@Product.Name - Edit</PageTitle>

<RadzenTemplateForm TItem="Product" Data="@Product" Submit="Submit">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12">
            <RadzenFieldset Text="Produkt Info">
                <RadzenStack Gap="1rem">

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2">
                            <RadzenLabel Text="Name" Component="Name" />
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="10">
                            <RadzenTextBox @bind-Value="Product.Name" Style="width: 100%;" Name="Name" />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2">
                            <RadzenLabel Text="Preis" Component="Price" />
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="10">
                            <RadzenNumeric @bind-Value="Product.Price" Style="width: 100%;" Name="Price" />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2">
                            <RadzenLabel Text="Beschreibung" Component="Description" />
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="10">
                            <RadzenTextArea @bind-Value="Product.Description" Style="width: 100%;" Name="Description" />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">

                        <RadzenColumn Size="12" SizeMD="2">
                            <RadzenLabel Text="Tags" Component="Tags" />
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="10">
                            <RadzenStack Gap="0.5rem">
                                <TagList Product="Product" />
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2">
                            <RadzenLabel Text="Breite (in px)" Component="Width" />
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="10">
                            <RadzenNumeric @bind-Value="Product.Width" Style="width: 100%;" Name="Width" />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2">
                            <RadzenLabel Text="Höhe (in px)" Component="Height" />
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="10">
                            <RadzenNumeric @bind-Value="Product.Height" Style="width: 100%;" Name="Height" />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2">
                            <RadzenLabel Text="Bild" Component="Image" />
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="10">
                            <RadzenImage Path="@(!string.IsNullOrEmpty(tempImage) ? tempImage : Product.Image)"
                                         Style="width: 100px; height: auto; margin-top: 1rem;" />

                            <p style="margin-bottom: 0; margin-top: .5rem;">
                                Neues Bild hochladen.
                            </p>
                            <RadzenUpload Multiple="false" Accept="image" ChooseText="Bild auswählen"
                                          Style="width: 100%;" Name="Image Save"
                                          Change=@OnClientChange
                                          Progress="@((args) => OnProgress(args, "Images only upload"))" />

                            @if (progress > 0)
                            {
                                <RadzenProgressBar @bind-Value=progress ProgressBarStyle="ProgressBarStyle.Primary"
                                                   ShowValue="false" Style="width: 100%;" />
                            }

                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2">
                            <RadzenLabel Text="Lizenz" Component="Licence" />
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="10">
                            <RadzenDropDown @bind-Value=@Product.Licence Data=@Licences TextProperty="Name" Style="width: 100%;" Name="Licence" />
                        </RadzenColumn>
                    </RadzenRow>

                    @if (Product.Comments?.Count > 0)
                    {
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="2">
                                <RadzenLabel Text="Sonstiges" />
                            </RadzenColumn>

                            <RadzenColumn Size="12" SizeMD="10">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Small" Icon="delete" Text="Alle Kommentare löschen" Click="@DeleteComments" />
                            </RadzenColumn>
                        </RadzenRow>
                    }

                </RadzenStack>
            </RadzenFieldset>
        </RadzenColumn>
    </RadzenRow>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Speichern" />
        <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Large" Icon="delete" Text="Löschen" Click="@Delete" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Abbrechen" Click="@Cancel" />
    </RadzenStack>
</RadzenTemplateForm>

<script>
    function onRemoveImage(dotnetHelper) {
        var element = document.getElementsByClassName('rz-button rz-button-icon-only')[2];

        if (element) {
            element.addEventListener('click', () => {
                dotnetHelper.invokeMethodAsync('OnRemoveImage');
            });
        }
    }
</script>

@code {
    [Parameter]
    [EditorRequired]
    public Product Product { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback OnDelete { get; set; }

    private List<Licence> Licences { get; set; }

    private double progress;
    private string? tempImage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        using var context = await DbFactory.CreateDbContextAsync();

        Licences = await context.Licences.ToListAsync();
    }

    /// <summary>
    /// Updates the product in the database and closes the dialog with a true result, which indicates that the product was updated.
    /// </summary>
    async Task Submit()
    {
        if (!string.IsNullOrEmpty(tempImage))
            Product.Image = tempImage;

        await OnSubmit.InvokeAsync();
        DialogService.Close(true);
    }

    async Task Delete()
    {
        await OnDelete.InvokeAsync();
        DialogService.Close(true);
    }

    /// <summary>
    /// Closes the dialog with a false result, which indicates that the product was not updated.
    /// </summary>
    void Cancel()
    {
        DialogService.Close(false);
    }

    [JSInvokable]
    public void OnRemoveImage()
    {
        FileUploadService.DeleteFile(tempImage);
        tempImage = null;
        StateHasChanged();
    }

    private void OnProgress(UploadProgressArgs args, string message)
    {
        progress = args.Progress;
    }

    private async Task OnClientChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            try
            {
                long maxFileSize = 10 * 1024 * 1024;
                // read file
                var stream = file.OpenReadStream(maxFileSize);

                var fileName = file.Name;
                // save file in temp variable, so the original wont be overwritten on cancel
                tempImage = await FileUploadService.UploadFileAsync(stream, fileName);
                stream.Close();

                await JSRuntime.InvokeVoidAsync("onRemoveImage", DotNetObjectReference.Create(this));
            }
            catch (Exception ex)
            {
                throw new Exception("Client-side file read error", ex);
            }
        }
    }

    /// <summary>
    /// Deletes all comments of the product.
    /// </summary>
    private async Task DeleteComments()
    {
        bool delete = await DialogService.OpenAsync<DeleteComments>("Alle Komentare löschen",
         new Dictionary<string, object> {
       { "Comments", Product.Comments } // comments cannot be null, because the button is only visible if there are comments
             },
         new DialogOptions() { Resizable = false, Draggable = false, CloseDialogOnOverlayClick = false }
        );

        if (delete)
            Product.Comments.Clear();

        // This is necessary to update the UI -> delete comments btn
        StateHasChanged();
    }
}
